#!/bin/sh

# Build DDNet releases for all platforms

START_TIME=$(date +%s)
renice -n 19 -p $$ > /dev/null
ionice -n 3 -p $$

[ $# -ne 1 ] && echo "Usage: ./build.sh VERSION" && exit 1

set -ex
BUILDS=/media/ddnet/builds
VERSION=$1
NUMVERSION=$(python -c "try:
  s = \"$VERSION\".split('.'); t = s[2] if len(s) > 2 else '0'; print(s[0].zfill(2)+s[1]+t)
except:
  print('0000')")
PASS="$(cat pass)"
MACPASS="$(cat macpass)"

build () # for Linux and Windows
{
  PLATFORM=$1

  rm -rf ddnet-master
  unzip /var/www/$WEBSITE/htdocs/master.zip
  CC=${PREFIX}gcc CXX=${PREFIX}g++ WINDRES=${PREFIX}windres $RUN sh -c "cd ddnet-master && bam config curl.use_pkgconfig=false opus.use_pkgconfig=false opusfile.use_pkgconfig=false ogg.use_pkgconfig=false && bam release"
  cd ddnet-master
  ${PREFIX}strip -s DDNet$EXE DDNet-Server$EXE dilate$EXE config_store$EXE config_retrieve$EXE
  python scripts/make_release.py $VERSION $PLATFORM
  mv DDNet-$VERSION-$PLATFORM.$ARCHIVE $BUILDS
  cd ..
  rm -rf ddnet-master
  unset CFLAGS LDFLAGS EXE ARCHIVE RUN TARGET_FAMILY TARGET_PLATFORM TARGET_ARCH PREFIX
}

# Get the sources
cd /var/www/$WEBSITE/htdocs
rm -f master.zip
wget https://github.com/ddnet/ddnet/archive/master.zip
TIME_PREPARATION=$(($(date +%s) - $START_TIME))

# Linux
cd /media/ddnet/debian6
umount proc sys dev 2> /dev/null || true
mount -t proc proc proc/
mount -t sysfs sys sys/
mount -o bind /dev dev/

START_TIME=$(date +%s)
RUN="chroot ." ARCHIVE=tar.gz build linux_x86_64
TIME_LINUX_X86_64=$(($(date +%s) - $START_TIME))
START_TIME=$(date +%s)
RUN="chroot ." ARCHIVE=tar.gz CFLAGS=-m32 LDFLAGS=-m32 PKG_CONFIG_PATH=/usr/lib32/pkgconfig/ build linux_x86
TIME_LINUX_X86=$(($(date +%s) - $START_TIME))

umount proc sys dev
cd ..

# Windows
START_TIME=$(date +%s)
TARGET_FAMILY=windows TARGET_PLATFORM=win64 TARGET_ARCH=amd64 PREFIX=x86_64-w64-mingw32- PATH=/usr/x86_64-w64-mingw32/bin:$PATH EXE=.exe ARCHIVE=zip build win64
TIME_WINDOWS_X86_64=$(($(date +%s) - $START_TIME))
START_TIME=$(date +%s)
TARGET_FAMILY=windows TARGET_PLATFORM=win32 TARGET_ARCH=ia32 PREFIX=i686-w64-mingw32- PATH=/usr/i686-w64-mingw32/bin:$PATH EXE=.exe ARCHIVE=zip build win32
TIME_WINDOWS_X86=$(($(date +%s) - $START_TIME))

# Android
START_TIME=$(date +%s)
cd /media/ddnet/commandergenius/project/jni/application/teeworlds
sed -e "s/YYYY/$VERSION/; s/XXXX/$NUMVERSION/" AndroidAppSettings.tmpl > AndroidAppSettings.cfg
rm -rf src
unzip /var/www/$WEBSITE/htdocs/dennis/master.zip
mv ddnet-master src
cp -r generated src/src/game/
rm -rf AndroidData
./AndroidPreBuild.sh

cd /media/ddnet/commandergenius
./changeAppSettings.sh -a
android update project -p project
PATH=$PATH:/opt/android-sdk/build-tools/23 ./build.sh
jarsigner -verbose -keystore ~/.android/release.keystore -storepass $PASS -sigalg MD5withRSA -digestalg SHA1 project/bin/MainActivity-release-unsigned.apk androidreleasekey
/opt/android-sdk/build-tools/23/zipalign 4 project/bin/MainActivity-release-unsigned.apk project/bin/MainActivity-release.apk
mv project/bin/MainActivity-release.apk $BUILDS/DDNet-${VERSION}.apk
TIME_ANDROID=$(($(date +%s) - $START_TIME))

# Mac OS X
START_TIME=$(date +%s)
cd /media/ddnet/
qemu-system-x86_64 -k de -usb -device usb-kbd -device usb-mouse -enable-kvm -vga std -m 2048 -smp 4,cores=4 -cpu core2duo -machine q35 -device isa-applesmc,osk="$MACPASS" -kernel ./chameleon_svn2360_boot -smbios type=2 -device ide-drive,bus=ide.2,drive=MacHDD -drive id=MacHDD,if=none,file=macosx.img -netdev user,id=hub0port0,hostfwd=tcp::10022-:22 -device e1000-82545em,netdev=hub0port0,id=mac_vnet0 -vnc :4 &
QEMU_PID=$!

while ! ssh -p 10022 -o ConnectTimeout=60 localhost exit; do
  sleep 1
done

ssh -p 10022 localhost "
  source .profile
  rm -rf ddnet-master master.zip &&
  curl -o master.zip http://$WEBSITE/dennis/master.zip &&
  unzip master.zip &&
  cd ddnet-master &&
  /usr/local/bin/bam config curl.use_pkgconfig=false opus.use_pkgconfig=false opusfile.use_pkgconfig=false ogg.use_pkgconfig=false &&
  /usr/local/bin/bam release;

  strip DDNet_x86 DDNet_x86_64 DDNet-Server_x86 DDNet-Server_x86_64 dilate_x86 dilate_x86_64 config_store_x86 config_store_x86_64 config_retrieve_x86 config_retrieve_x86_64 &&
  python scripts/make_release.py $VERSION osx &&
  curl -F \"uploadFile=@DDNet-$VERSION-osx.dmg\" $WEBSITE/tw/upload.php &&
  halt"

mv /home/deen/.teeworlds/maps/DDNet-$VERSION-osx.dmg $BUILDS
sleep 1m
kill $QEMU_PID
TIME_MACOSX=$(($(date +%s) - $START_TIME))

{ set +x; } 2>/dev/null
echo ""
printf "Preparation:    %4s s\n" "$TIME_PREPARATION"
printf "Linux x86_64:   %4s s\n" "$TIME_LINUX_X86_64"
printf "Linux x86:      %4s s\n" "$TIME_LINUX_X86"
printf "Windows x86_64: %4s s\n" "$TIME_WINDOWS_X86_64"
printf "Windows x86:    %4s s\n" "$TIME_WINDOWS_X86"
printf "Android:        %4s s\n" "$TIME_ANDROID"
printf "Mac OS X:       %4s s\n" "$TIME_MACOSX"
